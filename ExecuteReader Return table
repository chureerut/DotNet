using System;
using System.Data;
using System.Data.SqlClient;

class Program
{
    static void Main()
    {
        string connectionString = "your_connection_string_here";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            SqlTransaction transaction = connection.BeginTransaction();

            try
            {
                // 1. ดึงข้อมูลทั้งหมดจากตารางและคืนค่าในรูปแบบ DataTable
                string selectAllSql = "SELECT * FROM Students";
                DataTable studentsDataTable = ExecuteReaderAsDataTable(connection, transaction, selectAllSql);
                PrintDataTable(studentsDataTable);

                // 2. ดึงข้อมูลเฉพาะบางคอลัมน์และคืนค่าในรูปแบบ DataTable
                string selectColumnsSql = "SELECT Name, Age FROM Students";
                DataTable columnsDataTable = ExecuteReaderAsDataTable(connection, transaction, selectColumnsSql);
                PrintDataTable(columnsDataTable);

                // 3. ดึงข้อมูลโดยมีเงื่อนไขและคืนค่าในรูปแบบ DataTable
                string selectWhereSql = "SELECT * FROM Students WHERE Age > @Age";
                using (SqlCommand command = new SqlCommand(selectWhereSql, connection, transaction))
                {
                    command.Parameters.AddWithValue("@Age", 20);
                    DataTable whereDataTable = ExecuteReaderAsDataTable(command);
                    PrintDataTable(whereDataTable);
                }

                // 4. ดึงข้อมูลโดยใช้ JOIN และคืนค่าในรูปแบบ DataTable
                string joinSql = @"
                    SELECT s.Id, s.Name, c.CourseName
                    FROM Students s
                    JOIN Enrollments e ON s.Id = e.StudentId
                    JOIN Courses c ON e.CourseId = c.Id";
                DataTable joinDataTable = ExecuteReaderAsDataTable(connection, transaction, joinSql);
                PrintDataTable(joinDataTable);

                // Commit the transaction
                transaction.Commit();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                try
                {
                    // Rollback the transaction
                    transaction.Rollback();
                    Console.WriteLine("Transaction rolled back.");
                }
                catch (Exception rollbackEx)
                {
                    Console.WriteLine($"Rollback Error: {rollbackEx.Message}");
                }
            }
        }
    }

    static DataTable ExecuteReaderAsDataTable(SqlConnection connection, SqlTransaction transaction, string sql)
    {
        using (SqlCommand command = new SqlCommand(sql, connection, transaction))
        {
            return ExecuteReaderAsDataTable(command);
        }
    }

    static DataTable ExecuteReaderAsDataTable(SqlCommand command)
    {
        DataTable dataTable = new DataTable();
        using (SqlDataReader reader = command.ExecuteReader())
        {
            if (reader.HasRows)
            {
                dataTable.Load(reader);
            }
        }
        return dataTable;
    }

    static void PrintDataTable(DataTable dataTable)
    {
        foreach (DataRow row in dataTable.Rows)
        {
            foreach (DataColumn column in dataTable.Columns)
            {
                Console.Write($"{column.ColumnName}: {row[column]} ");
            }
            Console.WriteLine();
        }
    }
}


ในโค้ดนี้:

ใช้ using กับ SqlCommand และ SqlDataReader เพื่อให้แน่ใจว่าทรัพยากรเหล่านี้ถูกปล่อยคืนทันทีหลังจากใช้งานเสร็จ
ใช้ reader.HasRows เพื่อตรวจสอบว่ามีแถวที่ดึงมาหรือไม่ ก่อนที่จะโหลดข้อมูลเข้าสู่ DataTable
การจัดการธุรกรรม (transaction) เพื่อให้สามารถยกเลิกการดำเนินการทั้งหมดในกรณีที่เกิดข้อผิดพลาด
การใช้วิธีนี้จะช่วยให้โค้ดทำงานได้มีประสิทธิภาพมากขึ้น โดยลดการใช้งานหน่วยความจำและเพิ่มความเร็วในการดำเนินการ
