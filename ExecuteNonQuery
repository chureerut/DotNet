//SQL ExecuteNonQuery ใช้กับคำสั่งที่ไม่ต้องการผลลัพธ์ (เช่น INSERT, UPDATE, DELETE)
//

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleAppDataAccess.dataaccess
{    
    public class mssql
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
        private static string connSql = ConfigurationManager.AppSettings.Get("connSql");

        public static bool ExecuteNonQuerySQL(string query)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(connSql))
                {
                    connection.Open();
                    using (SqlTransaction transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted))
                    {
                        try
                        {
                            using (SqlCommand command = new SqlCommand(query, connection, transaction))
                            {
                                command.CommandTimeout = 5000;
                                command.ExecuteNonQuery();
                            }

                            // Commit the transaction
                            transaction.Commit();
                            log.Info("Transaction committed successfully.");
                            log.Info("Success");
                            return true; // Return success
                        }
                        catch (SqlException ex)
                        {
                            log.Error($"SQL Error: {ex.Message}");

                            // Attempt to rollback the transaction
                            try
                            {
                                transaction.Rollback();
                                log.Info("Transaction rolled back.");
                            }
                            catch (Exception rollbackEx)
                            {
                                log.Error($"Rollback Error: {rollbackEx.Message}");
                            }

                            return false; // Return failure
                        }
                        catch (Exception ex)
                        {
                            log.Error($"Error: {ex.Message}");

                            // Attempt to rollback the transaction
                            try
                            {
                                transaction.Rollback();
                                log.Info("Transaction rolled back.");
                            }
                            catch (Exception rollbackEx)
                            {
                                log.Error($"Rollback Error: {rollbackEx.Message}");
                            }

                            return false; // Return failure
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error($"Error: {ex.Message}");
                return false; // Return failure
            }

        }
    }
}



//ในโค้ดนี้:
//ฟังก์ชัน ExecuteDatabaseOperations จะคืนค่า true หากการดำเนินการสำเร็จและธุรกรรมถูก commit
//หากมีข้อผิดพลาดใดๆ เกิดขึ้น ฟังก์ชันจะคืนค่า false และทำการ rollback ธุรกรรม
//ใน Main เราทำการเรียก ExecuteDatabaseOperations และตรวจสอบผลลัพธ์เพื่อพิมพ์ข้อความบอกว่าสำเร็จหรือไม่สำเร็จ


ReadUncommitted: ใช้ในการอนุญาตให้การอ่านข้อมูลที่ยังไม่ได้ Commit แต่อาจทำให้เกิดปัญหาการอ่านข้อมูลที่ไม่ถูกต้อง (dirty reads).

ReadCommitted: ใช้ในการอนุญาตให้การอ่านข้อมูลเฉพาะที่มีการ Commit เท่านั้น ซึ่งลดความเสี่ยงในการเกิด dirty reads แต่ยังสามารถเกิดปัญหาการอ่านข้อมูลที่ไม่เหมือนกัน (non-repeatable reads).

RepeatableRead: ใช้ในการอนุญาตให้การอ่านข้อมูลใน Transaction เดียวกันเป็นครั้งเดียว ซึ่งลดความเสี่ยงในการเกิด dirty reads และ non-repeatable reads แต่ยังสามารถเกิดปัญหา phantom reads (การอ่านข้อมูลที่เพิ่มเข้ามาใน Transaction อื่น) ได้.

Serializable: ใช้ในการอนุญาตให้การอ่านข้อมูลที่ไม่เปลี่ยนแปลงในระหว่างการทำ Transaction ทำให้ลดความเสี่ยงในการเกิด dirty reads, non-repeatable reads, และ phantom reads ทั้งหมด.
